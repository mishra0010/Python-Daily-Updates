# 🔢 Product of Array Except Self

**LeetCode Problem Link:** [Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/submissions/1614597878/)

---

## 🧾 Problem Statement

Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all elements of `nums` except `nums[i]`.

The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer. You must solve the problem in O(n) time without using the division operation.

---

## 📌 Constraints

- 2 <= nums.length <= 10⁵  
- -30 <= nums[i] <= 30  
- The result is guaranteed to fit in a 32-bit integer  
- Division is not allowed  
- Time complexity must be O(n)  

---

## 💡 Examples

**Example 1**  
Input: nums = [1, 2, 3, 4]  
Output: [24, 12, 8, 6]  

**Example 2**  
Input: nums = [-1, 1, 0, -3, 3]  
Output: [0, 0, 9, 0, 0]

---

## 🛠️ Solution Approaches

### 1. Brute Force Approach (O(n²) Time | O(n) Space)

In this approach, we iterate over each element of the array using two nested loops. For each index `i`, we multiply all elements of the array except `nums[i]` and store the result in a temporary array.

**Code:**
```python
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        res = [0] * n

        for i in range(n):
            prod = 1
            for j in range(n):
                if i == j:
                    continue
                prod *= nums[j]
            res[i] = prod
        return res


# Optimized Approach Using Prefix and Postfix (O(n) Time | O(1) Extra Space)

This method uses two passes to calculate prefix and postfix products:
In the first pass (left to right), we compute the prefix product for each index and store it in the result array.
In the second pass (right to left), we multiply the result with the postfix product of each index.

The idea is:
res[i] = product of all elements to the left of i * product of all elements to the right of i

Code:

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1] * len(nums)

        prefix = 1
        for i in range(len(nums)):
            res[i] = prefix
            prefix *= nums[i]

        postfix = 1
        for i in range(len(nums) - 1, -1, -1):
            res[i] *= postfix
            postfix *= nums[i]

        return res
