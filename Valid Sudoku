Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.



Logic - > 

The function checks whether a given 9x9 Sudoku board is valid, following standard Sudoku rules. These rules say that each row, each column, and each of the nine 3x3 sub-boxes (or squares) must contain the digits 1 to 9 without any repetition. Empty cells are marked with a dot "." and are ignored in the checks.

1. Row check:
It loops through each row (from 0 to 8). For each row, it keeps a set to track the numbers already seen. It goes through all 9 columns in that row using board[row][i]. If a number is already in the set, the board is invalid and it returns False.

2. Column check:
It loops through each column (from 0 to 8). For each column, it checks all 9 rows using board[i][col], and similarly keeps track of seen numbers in a set. Again, duplicates mean it's not valid.

3. Sub-box (3x3 square) check:
There are 9 small 3x3 boxes in the Sudoku grid. To cover all of them, it loops from square 0 to 8. Each box can be found using:

Row index: (square // 3) * 3 + i

Column index: (square % 3) * 3 + j Here, i and j go from 0 to 2 to cover each cell inside the 3x3 box. The function checks these cells for duplicates as well.

If all rows, columns, and 3x3 boxes pass the test without duplicates, the function returns True, meaning the Sudoku board is valid.



Code - 

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        for row in range(9):
            seen = set()
            for i in range(9):
                if board[row][i] == ".": 
                    continue
                if board[row][i] in seen:
                    return False
                seen.add(board[row][i])
        
        for col in range(9):
            seen = set()
            for i in range(9):
                if board[i][col] == ".":
                    continue
                if board[i][col] in seen:
                    return False
                seen.add(board[i][col])
            
        for square in range(9):
            seen = set()
            for i in range(3):
                for j in range(3):
                    row = (square//3) * 3 + i
                    col = (square % 3) * 3 + j
                    if board[row][col] == ".":
                        continue
                    if board[row][col] in seen:
                        return False
                    seen.add(board[row][col])
        return True
